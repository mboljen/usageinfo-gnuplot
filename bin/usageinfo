#!/usr/bin/env perl
#
# Created:         Do 2023-10-26 14:06:36 CEST (boljen)
# Last modified:   So 2024-01-21 22:02:21 CET (boljen)
#
# usageinfo-gnuplot:
#    Convert usageinfo data to gnuplot data.

use strict;
use warnings;

# Include modules
use Time::Piece;
use Time::Seconds;
use File::Spec::Functions;
use Getopt::Long;
use Math::Spline;
use Math::Derivative qw(:all);
use Pod::Usage;
use POSIX qw(strftime);
use Regexp::Common;
use Time::Local;
use Spreadsheet::Read::Simple;


# Initialize default values
my $sheetlabel = 1;
my $dtfmt = '%Y-%m-%dT%H:%M:%S%z';
my $rate;
my $color;
my $scale = 1;
my $yformat;
my $yrange;
my $ylabel;
my $max = 0;
my $period;
my $title;
my $man = 0;
my $help = 0;
my @column;
my $sep;
my $reset = 0;

# Parse command line options
GetOptions(
    'column=i{2}' => \@column,
    'sheet=s'     => \$sheetlabel,
    'sep=s{1}'    => \$sep,
    'dtfmt=s'     => \$dtfmt,
    'r|rate=s'    => \$rate,
    'reset!'      => \$reset,
    'c|color=s'   => \$color,
    's|scale=f'   => \$scale,
    'yformat=s'   => \$yformat,
    'ylabel=s'    => \$ylabel,
    'yrange=s'    => \$yrange,
    'm|max=i'     => \$max,
    'p|period=s'  => \$period,
    't|title=s'   => \$title,
    'help|?'      => \$help,
    'man'         => \$man,
);

# Set default value for columns unless defined
@column=(1,2) unless @column;

# Check max value
die "Invalid max value: $max" unless $max >= 0;

# Check yrange value
die "Invalid yrange value, expects <num>:<num>, received \"$yrange\""
    if defined $yrange and $yrange !~ m/^(?:$RE{num}{real})?:(?:$RE{num}{real})?$/;

# Show plain old documentation
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

# Get file
my $file = shift;

# Check file parameter
die "No file defined" unless defined $file;
die "Not a valid file: $file" unless -f $file;

# Read spreadsheet and fetch sheet
my $book = ReadDataSimple($file, sep => $sep);
my $sheet = $book->sheet($sheetlabel);

# Check number of columns
die "Abscissa column tag exceeds available columns" if $column[0] > $sheet->maxcol;
die "Ordinate column tag exceeds available columns" if $column[1] > $sheet->maxcol;

# Fetch timestamps and function values
my @dt = $sheet->column($column[0]);
my @y  = $sheet->column($column[1]);

# Exit if array sizes do not match
die "Array size mismatch of abscissa and ordinate values" if $#dt != $#y;

# Internal variables
my $data = {};
my $dataset = {};
my $timefmt = '';
my $xformat = '';
my $xdata = 0;
my $xlabel;
my $dtmin;
my $dtmax;
my $tagfmt;

# Loop over timestamps
for (my $i = 0; $i <= $#dt; $i++)
{
    # Initialize timestamp
    my $dt;

    # Parse datetime string
    my $err;
    {
        local $@; # protect existing $@
        eval { $dt = Time::Piece->strptime($dt[$i],$dtfmt) };
        if ($@)
        {
            $@ !~ m/Error parsing time/ and $err = $@;
        }

        # Reset time object if ordinate value is not a number
        $dt = undef if not defined $y[$i] or $y[$i] !~ m/^$RE{num}{real}$/;

    }
    die $err if defined $err;

    # Invalid data, remove from array
    if (not defined $dt)
    {
        # Remove line from arrays
        splice @dt,$i,1;
        splice @y,$i,1;

        # Break out loop if no items left
        last unless @dt;

        # Redo this step
        redo;
    }

    # Get unixtime
    my $unixtime = $dt->epoch;

    # Convert to seconds since the epoch
    $dt[$i] = $unixtime;

    # Update start and finish timestamps
    $dtmin = $dt[$i] if not defined $dtmin or $dt[$i] < $dtmin;
    $dtmax = $dt[$i] if not defined $dtmax or $dt[$i] > $dtmax;

    # Scale ordinate values
    $y[$i] *= $scale;

    # Add datapoint to data hash
    $data->{$unixtime} = { value => $y[$i] };
}

# Create spline
my $spline = Math::Spline->new(\@dt,\@y);

# If first order differentation is requested
if (defined $rate)
{
    # Exit if options rate and reset are enabled
    die "Options rate and reset are mutually exclusive\n" if $reset;

    # Check option value
    if ($rate =~ m/^$RE{num}{int}$/)
    {
        # Rate with respect to number of given seconds
    }
    elsif ($rate =~ m/^(?:year)s?$/i)         { $rate = ONE_YEAR;    }
    elsif ($rate =~ m/^(?:month)s?$/i)        { $rate = ONE_MONTH;   }
    elsif ($rate =~ m/^(?:week)s?$/i)         { $rate = ONE_WEEK;    }
    elsif ($rate =~ m/^(?:day)s?$/i)          { $rate = ONE_DAY;     }
    elsif ($rate =~ m/^(?:hour)s?$/i)         { $rate = ONE_HOUR;    }
    elsif ($rate =~ m/^(?:min)(?:unte)?s?$/i) { $rate = ONE_MINUTE;  }
    elsif ($rate =~ m/^(?:sec)(?:ond)?s?$/i)  { $rate = 1;           }
    else
    {
        die "Invalid rate specifier, received \"$rate\"";
    }

    # Obtain first derivative (rate with respect to seconds)
    my @y1 = Derivative1(\@dt,\@y);

    # Manipulate data values
    for my $i (0 .. $#dt)
    {
        my $unixtime = $dt[$i];
        $y1[$i] *= $rate;
        $data->{$unixtime}{value} = $y1[$i];
    }

    # Replace spline object with first derivative
    $spline = Math::Spline->new(\@dt,\@y1);
}

# Quit if no data has been found at all
die "No usageinfo found" unless scalar keys %{$data};

# Check if data needs to be split in periods
if (defined $period)
{

    # Check period identifier
    if ($period =~ m/^y(?:ear)?s?$/i)
    {
        # Yearly
        $tagfmt  = '%Y';
        $timefmt = '%j';                # Day of the Year, i.e. 1-365
        $xformat = '%b';                # Abbreviated Name of the Month
        $xlabel  = '';
        $xdata   = 1;
    }
    elsif ($period =~ m/^m(?:onth)?s?$/i)
    {
        # Monthly
        $tagfmt  = '%b %y';
        $timefmt = '%d';                # Day of the Month, i.e. 1-31
        $xformat = '%d';                # Day of the Month, 1-31
        $xlabel  = 'Day of the Month';
        $xdata   = 1;
    }
    elsif ($period =~ m/^w(?:eek)?s?$/i)
    {
        # Weekly
        $tagfmt  = '%Y/%W';
        $timefmt = '%w';                # Day of the Week, i.e. 0-6 (Sunday = 0)
        $xformat = '%.0f';              # Abbreviated Name of the Weekday
        $xlabel  = 'Day of the Week';
        $xdata   = 0;
    }
    elsif ($period =~ m/^d(?:ay)?s?$/i)
    {
        # Daily
        $tagfmt  = '%Y-%m-%d';
        $timefmt = '%H:%M';             # Clocktime
        $xformat = '%k';                # Hour of the Day, 0-23
        $xlabel  = 'Hour of the Day';
        $xdata   = 1;
    }
    elsif ($period =~ m/^h(?:our)?s?$/i)
    {
        # Hourly
        $tagfmt  = '%Y-%m-%d %H';
        $timefmt = '%H:%M';             # Clocktime
        $xformat = '%M';                # Minute of the Hour, 00-59
        $xlabel  = 'Minute of the Hour';
        $xdata   = 1;
    }
    else
    {
        # Invalid period specifier
        die "Invalid period value, received \"$period\""
    }

    # Create datasets
    foreach my $unixtime (keys %{$data})
    {
        my $key = strftime($tagfmt,localtime($unixtime));
        $dataset->{$key}{$unixtime} = $data->{$unixtime};
    }

    # Interpolate where required
    foreach my $key (sort { $a cmp $b } keys %{$dataset})
    {
        # Get keys of current dataset
        my @unixtime = sort { $a <=> $b } keys %{$dataset->{$key}};

        # Convert to time object
        my $dt = Time::Piece->strptime($unixtime[0],"%s");

        # Convert from gmtime to localtime
        $dt = localtime($dt->epoch);

        # Set start and end points
        my ($dt0,$dt1);
        if ($period =~ m/^y/i)
        {
            # Get start and end of the current year
            $dt0 = $dt->truncate(to => 'year');
            $dt1 = $dt0 + ONE_YEAR - ONE_DAY;
        }
        elsif ($period =~ m/^m/i)
        {
            # Get start and end of current month
            $dt0 = $dt->truncate(to => 'month');
            $dt1 = $dt0 + ONE_MONTH - ONE_DAY;
        }
        elsif ($period =~ m/^w/i)
        {
            # Get start and end of current week
            $dt0 = $dt->truncate(to => 'day');
            my $wday = $dt->_wday; # 0 = Sunday
            $dt0 -= ONE_DAY * $wday;
            $dt1 = $dt0 + ONE_WEEK - ONE_DAY;
        }
        elsif ($period =~ m/^d/i)
        {
            # Get start and end of current day
            $dt0 = $dt->truncate(to => 'day') ;
            $dt1 = $dt0 + ONE_DAY - ONE_MINUTE;
        }

        # Create function value by spline interpolation at start point (but do not extrapolate)
        if ($dt > $dt0)
        {
            $dt0 = $dt0->epoch;
            $dataset->{$key}{$dt0} = { value => $spline->evaluate($dt0) } if $dt0 > $dtmin;
        }

        # Create function value by spline interpolation at end point (but do not extrapolate)
        if ($dt < $dt1)
        {
            $dt1 = $dt1->epoch;
            $dataset->{$key}{$dt1} = { value => $spline->evaluate($dt1) } if $dt1 < $dtmax;
        }
    }

    # Apply offset to function values of datasets if reset option is enabled
    if ($reset)
    {
        # Loop over datasets
        foreach my $key (keys %{$dataset})
        {
            # Initialize variable for offset
            my $offset;

            # Loop over values
            foreach my $unixtime (sort { $a <=> $b } keys %{$dataset->{$key}})
            {
                $offset = $dataset->{$key}{$unixtime}{value} unless defined $offset;
                $dataset->{$key}{$unixtime}{value} -= $offset;
            }
        }
    }
}
else
{
    # Get time range between last and first timestamp
    my $diff = $dtmax - $dtmin;

    # Check time range
    if ($diff > ONE_YEAR)
    {
        # More than one year
        $xformat = '%b %Y';
        $xlabel  = '';
        $timefmt = '%s';
        $xdata   = 1;
    }
    elsif ($diff > ONE_MONTH)
    {
        # More than one month
        $xformat = '%b';
        $xlabel  = '';
        $timefmt = '%s';
        $xdata   = 1;
    }
    elsif ($diff > ONE_DAY)
    {
        # More than one day
        $xformat = '%b %d';
        $xlabel  = '';
        $timefmt = '%s';
        $xdata   = 1;
    }
    elsif ($diff > ONE_HOUR)
    {
        # More than one hour
        $xformat = '%k';
        $xlabel  = 'Hour of the Day';
        $timefmt = '%s';
        $xdata   = 1;
    }
    else
    {
        # Everything else (less than one hour)
        $xformat = '%M';
        $xlabel  = 'Minute of the Hour';
        $timefmt = '%s';
        $xdata   = 1;
    }

    # Create datasets from data
    foreach my $unixtime (keys %{$data})
    {
        my $tag = 'all';
        $dataset->{$tag}{$unixtime} = $data->{$unixtime};
    }
}


# Set default title
$title = sprintf("%s",$file) unless defined $title;

# Print Gnuplot header
print <<GNUPLOT_HEAD;
set terminal qt enhanced persist size 1024,576 font ",12"
set title "$title"
set xlabel "$xlabel"
set format x "$xformat"
set grid
unset colorbox
GNUPLOT_HEAD

# Print week days
if (defined $period and $period =~ m/^w/i)
{
    print "set xtics ( \"Sun\" 0, \"Mon\" 1, \"Tue\" 2, \"Wed\" 3, \"Thu\" 4, \"Fri\" 5, \"Sat\" 6)\n";
}

# Apply format specifier to ordinate axis if defined
if (defined $yformat)
{
    printf "set format y \"%s\"\n", $yformat;
}

# Apply range specifier to ordinate axis if defined
if (defined $yrange)
{
    printf "set yrange [%s]\n", $yrange;
}

# Apply label to ordinate axis if defined
if (defined $ylabel)
{
    printf "set ylabel \"%s\"\n", $ylabel;
}

# Enable key if periods are enabled
if (defined $period)
{
    #
    printf "set key outside right top vertical\n";
}
else
{
    printf "unset key\n";
}

# Enable RGB mode if specific color is defined
if (defined $color)
{
    printf "set palette mode RGB\n";
    printf "set palette defined (0 \"%s\", 1 \"gray90\")\n", $color;
}

# Enable time mode for abscissa axis
if ($xdata)
{
    print "set xdata time\n";
    print "set timefmt \"$timefmt\"\n";
}

# Sort datasets according to key
my @set = sort { $a cmp $b } keys %{$dataset};

# Determine number of curves
$max = ($max==0) ? $#set : $max-1;

splice @set, 0, $#set-$max if $#set > $max;
push @set, undef while $#set < $max;

# Initiate plot command
print "plot ";

# Add lines
for my $i (0 .. $max)
{
    next unless defined $set[$i];
    printf "'-' u 1:2 t '%s' w linespoints lc palette frac %.3f lw 2", $set[$i], ($max == 0) ? 0 : 1-$i/$max;
    printf ", \\\n     " if $i < $max;
}

# Finish plot command
print "\n";

# Add curve data inline
for my $i (0 .. $max)
{
    next unless defined $set[$i];
    my $hashref = $dataset->{$set[$i]};
    for my $unixtime (sort { $a cmp $b } keys %{$hashref})
    {
        my $dt = strftime($timefmt,localtime($unixtime));
        my $yfmt = (defined $yformat) ? $yformat : '%s';
        printf "%s " . $yfmt . "\n", $dt, $hashref->{$unixtime}{value};
    }
    print "e\n";
}


__END__


=head1 NAME

usageinfo - Convert usageinfo data to gnuplot data


=head1 SYNOPSIS

B<usageinfo> [I<options>] | B<gnuplot>


=head1 OPTIONS

=over 4

=item B<--man>

Prints the manual page and exits.

=item B<--help>

Prints a brief help message and exits.


=back


=head2 READING DATA

Customize how data is read in.

=over 4

=item B<--sep>=I<value>

Sets separation character for plain text files.

=item B<--sheet>=I<value>

Sets sheet label for spreadsheet files (default: 1).

=item B<--column>=I<col>,I<col>

Sets numbers of abcissa column (default: 1) and ordinate column (default: 2).

=item B<--dtfmt>=I<datespec>

Set date specifier according to B<strftime>.

=back


=head2 WRITING DATA

Customize how data is output.

=over 4

=item B<-t>, B<--title>=I<string>

Uses specific Gnuplot title.

=item B<--ylabel>=I<value>

Uses specific Gnuplot label for ordinate axis (default: undef).

=item B<--yformat>=I<value>

Uses specific Gnuplot format for ordinate tics (default: undef).

=item B<--yrange>=I<value>

Uses specific Gnuplot range for ordinate axis (default: undef).

=item B<-c>, B<--color>=I<colorspec>

Uses specific Gnuplot color.

=item B<-r>, B<--rate>=I<ratespec>

Show first derivative of ordinate values with respect to I<ratespec>.  Available options are: C<year>, C<month>, C<week>, C<day>, C<hour>, C<min>, C<sec>.  Alternatively, a custom period can be specified in seconds.

=item B<-s>, B<--scale>=I<num>

Scales ordinate values by factor I<num> (default: 1).

=back

=head3 Splitting

Customize data splitting.

=over 4

=item B<-p>, B<--period>=I<string>

Splits data with respect to periods.  Available options are: C<year>, C<month>, C<week>, C<day>, C<hour> (default: year).

=item B<-m>, B<--max>=I<num>

Limits output to latest I<num> datasets only.  Set to C<0> to include all datasets (default: 0).

=item B<--reset>

Resets data to zero at the start of each period.

=back


=head1 DESCRIPTION

Processes time-dependent data and maps function values to fixed periods of time.


=head1 HISTORY

 2024-01-03  Original version


=head1 AUTHOR

 Matthias Boljen


=head1 COPYRIGHT AND LICENSE

MIT License

Copyright (c) 2024 Matthias Boljen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut
